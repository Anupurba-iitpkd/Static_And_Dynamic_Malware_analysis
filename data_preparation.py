import pefile as pe
import os 
import numpy as np
import pandas as pd

benign_l = os.listdir("malware_dataset/benignware") #label : 0
malware_l = os.listdir("malware_dataset/malware") #label : 1
test_l = os.listdir("malware_dataset/testdata")
benign_path = "malware_dataset/benignware/"
malware_path = "malware_dataset/malware/"
test_path = "malware_dataset/testdata/"

no_of_sections = []
no_of_symbols = []
timestamp = []
characteristics = []
addr_of_entry_pt = []
size_of_init_data = []
size_of_uninit_data = []
checksum = []
dll_char = []
has_relocs_ = []
verify_checksum_ = []
is_dll_ = []
magic_value = []
directory_entry_imports_len = []
imports_len = []
imports_len = []
label = []


def create_df(directory,path):


    print(directory)
    count = 0
    for i in directory:
        print(count)
        count = count + 1

        try:
            filename = path+str(i)
#            print(filename)
            p = pe.PE(name=filename)
            print("Hash Value : ",p.get_imphash()) 
    
            print("e_magic_value : ", hex(p.DOS_HEADER.e_magic))
            magic = p.DOS_HEADER.e_magic
            magic_value.append(magic)
        
            print("signature : ", hex(p.NT_HEADERS.Signature))

            for section in p.sections:
            #    print(section.Name.decode('utf-8'))
#                print("\t Virtual Address :", section.VirtualAddress)
#               print("\t Misc_Physical Address : ", section.Misc_PhysicalAddress)
#               print("\t Pointer to raw data : ", section.PointerToRawData)
#               print("\t Pointer to relocations : ", section.PointerToRelocations)
#               print("\t Pointer to line numbers : ",section.PointerToLinenumbers)
#               print("\t Number of Relocations", section.NumberOfLinenumbers)
                pass


            has_relocs_.append(p.has_relocs())
            verify_checksum_.append(p.verify_checksum())
            is_dll_.append(p.is_dll())
    
            no_of_sections.append(p.FILE_HEADER.NumberOfSections)
    
            no_of_symbols.append(p.FILE_HEADER.NumberOfSymbols)
    
            timestamp.append(p.FILE_HEADER.TimeDateStamp)
    
            characteristics.append(p.FILE_HEADER.Characteristics)
    
            addr_of_entry_pt.append(p.OPTIONAL_HEADER.AddressOfEntryPoint)
    
            size_of_init_data.append(p.OPTIONAL_HEADER.SizeOfInitializedData)
    
            size_of_uninit_data.append(p.OPTIONAL_HEADER.SizeOfUninitializedData)
    
            checksum.append(p.OPTIONAL_HEADER.DllCharacteristics)
    
            #directory_entry_imports_len.append(len(p.DIRECTORY_ENTRY_IMPORT))
    
            #imports = [x.imports for x in p.DIRECTORY_ENTRY_IMPORT]
            #imports_len.append(len(imports))

#            label.append(1)
#            label.append(0)
        except OSError as e:
            pass
        except pe.PEFormatError as e:
            pass

#create_df(malware_l,malware_path)
#create_df(benign_l,benign_path)
create_df(test_l,test_path)

df = pd.DataFrame()
df['Magic Number'] = magic_value
df['Number of Sections'] = no_of_sections
df['number of symbols'] = no_of_symbols
df['has relocs'] = has_relocs_
df['is dll'] = is_dll_
df['verify checksum'] = verify_checksum_
df['time stamp'] = timestamp
df['characteristics'] = characteristics
df['address of entry point'] = addr_of_entry_pt
df['size of init data'] = size_of_init_data
df['size of uninit data'] = size_of_uninit_data
df['checksum'] = checksum
#df['label'] = label
df.to_csv(r"malware_dataset/benignware_output/data_frame_benign.csv")
#df.to_csv(r"malware_dataset/benignware_output/data_frame_mal.csv")
df.to_csv(r"malware_dataset/data_frame_test.csv")

